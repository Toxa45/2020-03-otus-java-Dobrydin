package ru.otus.jdbc.mapper.impl;

import java.lang.reflect.Field;
import java.util.List;
import java.util.stream.Collectors;
import lombok.Getter;
import ru.otus.jdbc.mapper.EntityClassMetaData;
import ru.otus.jdbc.mapper.EntitySQLMetaData;

@Getter
public class EntitySQLMetaDataImpl implements EntitySQLMetaData {

  private static final String SELECT_TEMPLATE = "SELECT * FROM %s %s;";
  private static final String INSERT_TEMPLATE = "INSERT INTO %s (%s) VALUES (%s);";
  private static final String UPDATE_TEMPLATE = "UPDATE %s SET %s %s;";

  private final String selectAllSql;
  private final String selectByIdSql;
  private final String insertSql;
  private final String updateSql;

  public EntitySQLMetaDataImpl(EntityClassMetaData<?> entityClassMD) {
    var tableName = entityClassMD.getName();
    var fileldsName = entityClassMD.getFieldsWithoutId()
        .stream()
        .map(Field::getName)
        .collect(Collectors.toList());
    String nameIdField = entityClassMD.getIdField().getName();
    var whereId = String.format("WHERE %s = ?", nameIdField);
    selectAllSql = selectAllSqlBuilder(tableName);
    selectByIdSql = selectByIdSqlBuilder(tableName, whereId);
    updateSql = updateSqlBuilder(tableName, fileldsName, whereId);
    List<String> fieldsInsert = fileldsName;
    if(!entityClassMD.autogenerated())
    {
      fieldsInsert = entityClassMD.getAllFields()
          .stream()
          .map(Field::getName)
          .collect(Collectors.toList());
    }
    insertSql = insertSqlBuilder(tableName, fieldsInsert);

  }

  private String selectAllSqlBuilder(String tableName) {
    return String.format(SELECT_TEMPLATE, tableName, "");
  }

  private String selectByIdSqlBuilder(String tableName, String whereId) {
    return String.format(SELECT_TEMPLATE, tableName, whereId);
  }

  private String insertSqlBuilder(String tableName, List<String> fileldsName) {
    return String.format(INSERT_TEMPLATE,
        tableName,
        String.join(",", fileldsName),
        fileldsName.stream().map(field -> "?").collect(Collectors.joining(","))
    );
  }

  private String updateSqlBuilder(String tableName, List<String> fileldsName, String whereId) {
    return String.format(UPDATE_TEMPLATE,
        tableName,
        fileldsName.stream().map(field -> String.format("%s = ?", field))
            .collect(Collectors.joining(",")),
        whereId
    );
  }
}
