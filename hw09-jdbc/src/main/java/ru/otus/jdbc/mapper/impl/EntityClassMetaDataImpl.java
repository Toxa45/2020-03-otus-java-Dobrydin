package ru.otus.jdbc.mapper.impl;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import lombok.Getter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.otus.jdbc.exception.MetadataException;
import ru.otus.jdbc.mapper.EntityClassMetaData;
import ru.otus.jdbc.annotation.Id;

@Getter
public class EntityClassMetaDataImpl<T> implements EntityClassMetaData<T> {

  private static final Logger logger = LoggerFactory.getLogger(EntityClassMetaDataImpl.class);

  private final String name;
  private final Constructor<T> constructor;
  private final Field idField;
  private final List<Field> allFields;
  private final List<Field> fieldsWithoutId;

  public EntityClassMetaDataImpl(Class<T> clazz) {

    name = clazz.getSimpleName();
    allFields = Arrays.stream(clazz.getDeclaredFields())
        .filter(this::isNotStaticModifierField)
        .peek(field -> field.setAccessible(true))
        .collect(Collectors.toUnmodifiableList());

    idField = allFields.stream()
        .filter(field -> field.isAnnotationPresent(Id.class))
        .findFirst()
        .orElseThrow(() -> new MetadataException("Not @id field for class " + name));
    Constructor<T> constructorClazz;
    try {
      constructorClazz = clazz.getDeclaredConstructor();
    } catch (NoSuchMethodException e) {
      logger.error(e.getMessage(), e);
      constructorClazz = (Constructor<T>) clazz.getDeclaredConstructors()[0];
    }
    constructorClazz.setAccessible(true);

    constructor = constructorClazz;

    fieldsWithoutId = allFields.stream()
        .filter(field -> !field.equals(idField))
        .collect(Collectors.toUnmodifiableList());
  }

  private boolean isNotStaticModifierField(Field field) {
    return !Modifier.isStatic(field.getModifiers());
  }

  @Override
  public boolean isAutogeneratedIdField() {
    return idField.getAnnotation(Id.class).autogenerated();
  }
}
